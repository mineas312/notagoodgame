#include "stdafx.h"
#ifdef _DEBUG

void DetermineSource(GLenum source, std::stringstream& ss)
{
	switch (source)
	{
	case GL_DEBUG_SOURCE_API:	// OpenGL API
		ss << "API:\n";
		break;
	case GL_DEBUG_SOURCE_WINDOW_SYSTEM: // Windowing system
		ss << "Windowing system:\n";
		break;
	case GL_DEBUG_SOURCE_SHADER_COMPILER: // Shader compilation stage
		ss << "Shader compilation:\n";
		break;
	case GL_DEBUG_SOURCE_THIRD_PARTY: // OpenGL-associated application
		ss << "3rd Party:\n";
		break;
	case GL_DEBUG_SOURCE_APPLICATION: // Generated by the user
		ss << "User:\n";
		break;
	default: // Other or undefined
		ss << "Other:\n";
		break;
	}
}

void DetermineType(GLenum type, std::stringstream& ss)
{
	switch (type)
	{
	case GL_DEBUG_TYPE_ERROR:
		ss << "  [ERROR] ";
		break;
	case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR:
		ss << "  [DEPRECATED]  ";
		break;
	case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR:
		ss << "  [UNDEFINED BEHAVIOR]  ";
		break;
	case GL_DEBUG_TYPE_PORTABILITY:
		ss << "  [PORTABILITY]  ";
		break;
	case GL_DEBUG_TYPE_PERFORMANCE:
		ss << "  [PERFORMANCE]  ";
		break;
	case GL_DEBUG_TYPE_MARKER:
		ss << "  [MARKER]  ";
		break;
	case GL_DEBUG_TYPE_PUSH_GROUP:
		ss << "  [GRPUSH]  ";
		break;
	case GL_DEBUG_TYPE_POP_GROUP:
		ss << "  [GRPOP]  ";
		break;
	default: // Other or undefined
		ss << "  [INFO]  ";
		break;
	}
}

void DetermineSeverity(GLenum severity, std::stringstream& ss)
{
	switch (severity)
	{
	case GL_DEBUG_SEVERITY_HIGH:
		ss << "S3! ";
		break;
	case GL_DEBUG_SEVERITY_MEDIUM:
		ss << "S2  ";
		break;
	case GL_DEBUG_SEVERITY_LOW:
		ss << "S1  ";
		break;
	case GL_DEBUG_SEVERITY_NOTIFICATION:
		ss << "S0  ";
		break;
	default:
		break;
	}
}

void APIENTRY oglDebugCallback(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam)
{
	std::stringstream outStream;
	DetermineSeverity(severity, outStream);
	DetermineSource(source, outStream);
	DetermineType(type, outStream);
	outStream << message << "\n\n";

	printf("%s", outStream.str().c_str());
	fprintf(stderr, "%s", outStream.str().c_str());
}

#endif // _DEBUG